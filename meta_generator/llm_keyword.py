
## LLM system library
import openai
from openai import OpenAI

## 경로 설정
import os, sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import argparse

## api key 설정
from dotenv import load_dotenv
import dotenv

## 기타 데이터 전처리 라이브러리
import json
import pandas as pd
from tqdm import tqdm

from pgvector.pgvector_busan import create_pgvector


# from db.busan_db import busan_db

dotenv_file = dotenv.find_dotenv()
load_dotenv(dotenv_file)
openai_api_key = os.getenv("openai_api_key")
# print(openai_api_key)

# args = arg_parser()
## LLM system
## LLM system
class LLM_keyword:
    def __init__(self, api_key=openai_api_key, model="gpt-4o", temperature=0.5):
        
        print(f"Current model: {model},\n... Available model: 'gpt-4o', 'gpt-4-turbo-preview', 'gpt-3.5-turbo-1106', 'gpt-4-0125-preview', 'gpt-4-1106-preview'")
        ### api key 설정
        self.client = OpenAI(api_key = api_key)
        print("... API key is set ...")
        ### model parameter 설정
        self.model = model
        self.temperature = temperature
        
    
    def get_keywords_json(self, input_docs,  save_path = None):
        ## system 및 prompt 정의 ; 키워드 추출을 위한 영화 제목 입력
        
        
        ### System : gpt 생성기에 대한 역할 정의
        ### response_format : json_object --> json 형태로 반환
        system = '''
        You are a keyword extractor that extracts keywords from input texts related to tourist place.
        You can generate keywords not contained in the input text, but related to the tourist place.
        "keywords_extracted" are the keywords extracted from the input text.
        "keywords_generated" are the keywords generated by the system related to the tourist place.
        
        Print the output in json format.
        '''
        
        response_format = {"type": "json_object"}
        
        ### 예시 입력 
        input_example1 = '''
        부산의 서쪽 낙동강변에는 저마다 특색을 가진 6개의 생태공원이 있다. 이 생태공원 중에서 잘 알려져 있지 않지만 자연 그대로의 모습으로 사랑받는 맥도생태공원을 소개한다. 맥도생태공원을 여행하는 가장 좋은 방법은 걷는 것이다. 공원이 그리 크지 않아서 공원 전체를 천천히 걸어도 1시간 30분을 넘기지 않는다.
        처음 맥도생태공원을 찾는 여행자들에게 추천하는 3가지 길이 있다. 첫 번째 길은 제방둑길에 조성된 벚꽃길과 그 아래 메타세쿼이아 길이다. 제방둑길에는 아름드리 벚나무와 메타세쿼이아 나무가 이어져 있는데 벚꽃이 활짝 핀 봄도 좋지만 한적하게 걸으며 여유로움을 즐기기에는 늦여름과 가을이 좋다.
        두 번째 길은 낙동강변을 따라 걷는 수변 오솔길과 산책로다. 공원에서 강변쪽으로 10분 정도 걸어가면 산책로와 쉼터도 잘 조성되어 있다. 중간 중간 낙동강 바로 옆을 끼고 걸을 수 있는 길도 있어 강바람에 흔들리는 갈대소리를 들으며 길을 걸을 수 있다.
        마지막은 생태공원 가운데 연꽃단지와 수생식물원 사이에 조성된 데크길이다. 데크길을 걸으며 다양한 수생식물과 연꽃을 찾아보는 재미가 좋다.
        '''
        output_example1 = '''
        {
         keywords_extracted: ["맥도생태공원", "낙동강변", "생태공원", "제방둑길", "벚꽃길", "메타세쿼이아 길", "수변 오솔길", "산책로", "연꽃단지", "수생식물원"]
         keywords_generated: ["자연", "걷기 여행", "여유로움", "데이트 코스"]
        }
        '''
        
        input_example2 = '''
        바다에서 불어오는 바람을 가장 먼저 맞는 곳.
        마린시티와 광안대교의 야경을 가장 가까운 곳에서 만나는 곳.
        여름이면 남녀노소가 모이는 휴식처, 민락수변공원이다.
        1997년 개장한 민락수변공원은 마린시티와 광안대교가 생기기 이전부터 부산시민들의 휴식처로 사랑받아왔다. 푸른 하늘과 끝없는 바다가 한눈에 펼쳐지는 풍경은 주변의 환경이 여러 번 바뀌는 동안에도 그 자리를 굳건히 지켜왔다.
        푸른 바다의 탁 트인 풍경은 보는 이들의 마음까지 시원하게 해주는 듯하다. 낮의 수변공원이 조용하게 혼자만의 바다를 만끽할 수 있는 매력이 있다면, 밤이 된 수변공원은 활기와 낭만이 넘친다. 특히 여름밤의 수변공원은 열대야를 날려버리고자 하는 사람들로 북적인다. 수변공원이 낮보다는 밤에 사랑 받는 이유가 여기에 있다. 밤의 파도에 비치는 마린시티와 광안대교의 불빛은 마치 밤하늘 위의 별들처럼 반짝거린다.
        매년 가을, 부산불꽃축제가 열리는 날은 민락수변공원에 인파가 가장 많이 몰려드는 순간이기도 하다. 밤하늘을 화려하게 수놓는 불꽃을 백사장에서보다 더 가까이에서 감상할 수 있기 때문이다.
        민락수변공원의 주변에는 편의시설을 비롯한 먹거리 촌이 형성되어 있다. 바다를 풍경 삼아 커피 한 잔의 여유를 느낄 수 있는 카페를 비롯해 고즈넉한 분위기를 풍기는 포장마차촌은 싱싱한 해산물을 먹을 수 있는 기쁨도 제공한다. 근처의 회타운이나 활어직판장에서 포장한 회를 가져와 삼삼오오 수변공원으로 걸어가는 사람들도 쉽게 만나 볼 수 있다. 밤바다를 바라보며 노상에서 즐기는 회의 맛에 바다의 낭만이 어우러진다는 것을 알기 때문이다.
        배를 든든하게 채웠다면 수변공원에서 광안리 백사장까지 이어진 산책로를 천천히 걸어보는 것도 좋겠다. 매 초마다 바뀌는 광안대교의 풍경을 바라보며 불어오는 바닷바람에 몸을 맡기면, 마음 깊은 곳에 숨겨두었던 걱정거리까지 시원하게 날려 보낼 수 있다. 공원에는 자전거 전용도로가 갖춰져 있어 자전거를 타는 이들도 많다. 낮 시간이라면 광안리 해변가의 삼익비치타운아파트 301동 앞에 위치한 자전거 무료대여소를 이용해보는 것도 좋다. 신분증만 맡기면 누구나 자전거를 무료로 대여할 수 있다.
        '''
        output_example2= '''        
        {
         keywords_extracted: ["마린시티", "광안대교", "야경", "민락수변공원", "부산불꽃축제", "편의시설", "포장마차촌", "회타운", "자전거 전용도로"]
         keywords_generated: ["여름", "풍경", "혼자만의 시간", "활기", "낭만", "밤하늘"]
        }
        '''
        
        ### main input 정의
        main_input = f'''
        Below are some examples.
        You must print the output in Korean and in JSON format.
        
        input: "{input_example1}"
        output: "{output_example1}"
        
        input: "{input_example2}"
        output: "{output_example2}"
        
        input: "{input_docs}"
        '''
        
        ### 위 변수들을 활용한 prompt 정리
        prompt = {"role": "system", "content": system,
                  "role": "user", "content": main_input}

        ### Chatgpt API를 활용한 response 생성 
        response = self.client.chat.completions.create(model=self.model, messages=[prompt], 
                                                temperature=self.temperature, 
                                                response_format = response_format).model_dump()
    
        response_text = response["choices"][0]["message"]["content"]
        #print("=== LLM 답변 완료 ===")
        ## save path 가 존재할 경우 string을 dict로 변환 및 저장
        if save_path:
            try:
                # 문자열을 딕셔너리로 변환
                response_json = json.loads(response_text)
                # 딕셔너리를 JSON 파일로 저장
                final_path = save_path + "/keywords_output.json"
                with open(final_path, 'w', encoding='utf-8') as json_file:
                    json.dump(response_json, json_file, ensure_ascii=False, indent=4)
                print(f'''
                      저장 경로: {final_path}
                      ''')
                print(f'''
                      출력 키워드:{response_json}
                      ''')
                return response_json ## dict 형태로 반환
            except:
                print("키워드 포멧 또는 저장 경로를 확인해주세요")
                return
        return response_text
        
    ### 창의적 키워드 출력 함수 --> 영화 제목만 입력 + 카테고리는 랜덤으로 선택


    
if __name__ == "__main__":
    db = create_pgvector()
    llm_keyword = LLM_keyword()
    
    sample_result = {
        "tourist_title": [],
        "overview": [],
        "keywords_extracted":[],
        "keywords_generated":[]
    }
    
    input_data = db.select_all_busan_data(cat_id = 1)
    
    for idx, row in tqdm(input_data[:50].iterrows(), total=50):
        try:
            title = row["MAIN_TITLE"]
            overview = row["ITEMCNTNTS"]
            
            keywords = llm_keyword.get_keywords_json(overview, save_path = None)
            keywords_json = json.loads(keywords)
            
            sample_result["tourist_title"].append(title)
            sample_result["overview"].append(overview)
            sample_result["keywords_extracted"].append(keywords_json["keywords_extracted"])
            sample_result["keywords_generated"].append(keywords_json["keywords_generated"])
        except:
            print(f"Error in {idx}")
            print(f'current row: {row}')
        
    sample_result_df = pd.DataFrame(sample_result)
    sample_result_df.to_excel("/home/ubuntu/workspace/sjkim/visit_busan/test/sample_data/sample_keywords_output.xlsx", index=False)
    
    
    
    # keywords = llm_keyword.get_keywords_json(input_docs=input_docs, save_path = None)
    # keywords_json = json.loads(keywords)
    
    
    # print(keywords_json)
            
    



            
    



